Important notes for packaging Python projects that use UV:

1. UV Support Status:
   - UV support in nixpkgs is minimal and experimental
   - Use uv-build as the build backend for projects using UV
   - Full UV workflow (dependency resolution, locking) is not yet integrated

2. Build System:
   - Set pyproject = true; (UV projects always use pyproject.toml)
   - Use uv-build in build-system array

3. Dependency Management:
   - Extract dependencies from pyproject.toml manually
   - UV's lock file (uv.lock) is not directly supported by Nix
   - Dependencies must be specified in the Nix expression

4. Environment Variables:
   - UV_NO_SYNC=1: Prevent UV from trying to sync dependencies
   - UV_PYTHON: Point to the Nix-provided Python interpreter
   - UV_CACHE_DIR: May need to set for build isolation

5. Common Issues:
   - UV expects to manage virtual environments itself
   - Network access during build will fail (UV tries to fetch deps)
   - Tests that rely on UV's dependency management will likely fail

7. Alternative Approach:
   - If uv-build doesn't work, try using hatchling or setuptools
   - Most UV projects still maintain compatibility with standard tools
